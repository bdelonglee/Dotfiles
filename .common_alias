###########################################################################
# >>>----------------------    OPTIONS & VARIABLES -------------------<<< #
###########################################################################

#-------- Basic {{{
#------------------------------------------------------
# If not running interactively, don't do anything
[[ $- != *i* ]] && return

export HISTCONTROL=ignoreboth:erasedups
EDITOR=vim

#}}}
#-------- FZF Options {{{
#------------------------------------------------------

# export FZF_DEFAULT_COMMAND='find .'
export FZF_DEFAULT_OPTS="-m --cycle --height=20 --border"
# export FZF_CTRL_T_COMMAND=""
# export FZF_CTRL_T_OPTS=""
# export FZF_CTRL_R_OPTS=""
# export FZF_ALT_C_COMMAND=""

#}}}

###########################################################################
# >>>----------------------    ALIASES   -----------------------------<<< #
###########################################################################

#-------- Aliases {{{
#------------------------------------------------------
# a quick way to get out of current directory ##
alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'
alias .2='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'
alias .6='cd ../../../../../../'

#list
alias l='ls --color=auto'
alias ls='ls --color=auto'
alias la='ls -A --color=auto'
alias lA='ls -Ap | grep -v / | egrep "^\."'
alias ll='ls -lh'
alias l.="ls -A | egrep '^\.'"      
alias lltr='ls -ltrh'
alias lltra='ls -ltrha'
alias ltr='ls -ltrh'
alias ltra='ls -ltrha'

alias lsd="ls -1d */"					# ls folders only
alias lsda='find . -maxdepth 1 -type d'
alias lsdA='ls -Ap | egrep "^\..*/$"'
alias lsf='ls --color=always -p | grep -v '/$''		# ls files only
alias lsa='ls -GghA'
alias lsx='ls -lX'

#fix obvious typo's
alias cd..='cd ..'
alias sl="ls"
alias pdw="pwd"

## Colorize the grep command output for ease of use (good for log files)##
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# Start calculator with math support
alias calc='bc -l'

#readable output
alias df='df -h'

# Make mount command output pretty and human readable format
alias mount='mount |column -t'

#free
alias free="free -mt"

# Show the active ports
alias port='netstat -tulanp'

# Get your public IP address and host.
alias ipinfo="curl ifconfig.me && curl ifconfig.me/host"

#continue download
alias wget="wget -c"

#userlist
alias userlist="cut -d: -f1 /etc/passwd"

# Busy
alias busy="cat /dev/urandom | hexdump -C | grep "ca fe""

# make directory with YYY-MM-DD name
mkdate() { local DIR="$(date +%F)-$1" ; mkdir "$DIR" && cd "$DIR" ; }

#merge new settings
alias merge="xrdb -merge ~/.Xresources"

# Aliases for software managment
# pacman or pm
alias pmsyu="sudo pacman -Syu --color=auto"
alias pacman='sudo pacman --color auto'
alias update='sudo pacman -Syu'

# pacaur or pc
alias pcsyu="pacaur -Syu"

#ps
alias ps="ps auxf"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"

# yaourt keeps tmp folder cleaner than packer
alias pks="yaourt -S --noconfirm "
alias pksyu="yaourt -Syu --noconfirm"
alias pksyua="yaourt -Syu  --aur --noconfirm"

#grub update
alias update-grub="sudo grub-mkconfig -o /boot/grub/grub.cfg"

#add new fonts
alias fc='sudo fc-cache -fv'

#get fastest mirrors in your neighborhood 
alias mirror="sudo reflector --protocol https --latest 50 --number 20 --sort rate --save /etc/pacman.d/mirrorlist"
alias mirrors=mirror

alias cal='cal -3m | grep -B6 -A6 --color -e " $(date +%e)" -e "^$(date +%e)"' # show calendar for 3 months
alias df='df -hT --total' # human readable, print filetype, and total
alias du='du -d1 -h' # max depth, human readable
alias free='free -h' # human readable
alias mkdir='mkdir -p -v' # create if not exist, verbose
alias rmdir='rmdir -v' # rm empty directory only
alias wget='wget -N -c' # continues/resumes

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

# quickly search through your command history: histg [keyword]
alias histg="history | grep"

# a cheap version of "tree" command
# alias tree="ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'"

alias c="clear"

# Generate a strong password
alias genpasswd="strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo"

# }}}
#-------- Clipboard and Upload {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=fKP0FLp3uW0 (xclip)
# 	https://www.youtube.com/watch?v=Ww7Sl4d8F8A (pastebinit)
# DESC: copy/paste for linux machines (Mac style)

alias pbcopy='xclip -selection clipboard'	# copy to clipboard, ctrl+c, ctrl+shift+c
alias pbpaste='xclip -selection clipboard -o'	# paste from clipboard, ctrl+v, ctrl+shitt+v
alias pbselect='xclip -selection primary -o'	# paste from highlight, middle click, shift+insert
alias pbnoformatting='xclip -selection clipboard -o | xclip -selection clipboard'

alias C="xclip"
alias V="xclip -o"
# }}}

###########################################################################
# >>>----------------------    FUNCTIONS   ---------------------------<<< #
###########################################################################

#-------- Edit Reload Goto Conf / Rc {{{
#------------------------------------------------------

cfg-bashrc() { $EDITOR ~/.bashrc ;}
cfg-bashrc_alias() { $EDITOR ~/.bashrc_alias ;}
cfg-bashrc_local() { $EDITOR ~/.bashrc_local ;}
cfg-commonalias() { $EDITOR ~/.common_alias;}
cfg-compton() { $EDITOR ~/.config/i3/compton.conf ;}
cfg-dunst() { $EDITOR ~/.config/i3/dunstrc ;}
cfg-grub() { sudo $EDITOR /etc/default/grub ;}
cfg-i3blocks() { $EDITOR ~/.config/i3/i3blocks.conf ;}
cfg-i3conf() { $EDITOR ~/.config/i3/config ;}
cfg-i3status() { $EDITOR ~/.config/i3/i3status.conf ;}
cfg-mc() { $EDITOR ~/.config/mc/ini ;}
cfg-mc-keymap() { $EDITOR ~/.config/mc/mc.keymap ;}
cfg-mpd() { $EDITOR ~/.mpd/mpd.conf ;}
cfg-mplayer() { $EDITOR ~/.mplayer/config ;}
cfg-mpv() { $EDITOR ~/.config/mpv/mpv.conf ;}
cfg-mpv-input() { $EDITOR ~/.config/mpv/input.conf ;}
cfg-nanorc() { $EDITOR ~/.nanorc;}
cfg-ncmpcpp() { $EDITOR ~/.ncmpcpp/config ;}
cfg-ncmpcpp-bindings() { $EDITOR ~/.ncmpcpp/bindings ;}
cfg-neofetch() { $EDITOR ~/.config/neofetch/config ;}
cfg-polybar() { $EDITOR ~/.config/polybar/config ;}
cfg-qutebrowser() { $EDITOR ~/.config/qutebrowser/qutebrowser.conf ;}
cfg-qutebrowser-keys() { $EDITOR ~/.config/qutebrowser/keys.conf ;}
cfg-qutebrowser-quickmarks() { $EDITOR ~/.config/qutebrowser/quickmarks ;}
cfg-rofibangs() { $EDITOR ~/.scripts/rofi-scripts-collection/rofi-bangs.sh ;}
cfg-ranger() { $EDITOR ~/.config/ranger/rc.conf ;}
cfg-ranger-rifle() { $EDITOR ~/.config/ranger/rifle.conf ;}
cfg-ranger-commands() { $EDITOR ~/.config/ranger/commands.py ;}
cfg-samba() { sudo $EDITOR /etc/samba/smb.conf ;}
cfg-surfraw() { $EDITOR ~/.config/surfraw/conf ;}
cfg-tcshrc() { $EDITOR ~/.tcshrc ;}
cfg-termite() { $EDITOR ~/.config/termite/config ;}
cfg-tmuxrc() { $EDITOR ~/.tmux.conf ;}
cfg-variety() { $EDITOR ~/.config/variety/variety.conf ;}
cfg-vimrc() { $EDITOR ~/.vimrc ;}
cfg-xbindkeysrc() { $EDITOR ~/.xbindkeysrc && killall xbindkeys ; xbindkeys ;}
cfg-xresources() { $EDITOR ~/.Xresources ;}
cfg-yaourtrc() { $EDITOR ~/.yaourtrc ;}
cfg-zshrc() { $EDITOR ~/.zshrc ;}
cfg-zshrc_alias() { $EDITOR ~/.zshrc_alias ;}
cfg-zshrc_local() { $EDITOR ~/.zshrc_local ;}

rld-bashrc() { source ~/.bashrc ;}
rld-commonalias() { source ~/.common_alias;}
rld-termite() { termite -c ~/.config/termite/config;}
rld-font() { fc-cache -v -f ;}
rld-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
rld-xbindkeys() { killall xbindkeys ; xbindkeys ;}
rld-xresources() { xrdb -load ~/.Xresources ;}
rld-zshrc() { source ~/.zshrc ;}

goto-aliasrc() { cd ~ ;}
goto-bashrc() { cd ~ ;}
goto-commonalias() { cd ~;}
goto-compton() { cd ~/.config/i3/ ;}
goto-dunst() { cd ~/.config/i3/ ;}
goto-grub() { cd /etc/default/grub ;}
goto-i3blocks() { cd ~/.config/i3/;}
goto-i3conf() { cd ~/.config/i3/ ;}
goto-i3status() { cd ~/.config/i3/;}
goto-mc() { cd ~/.config/mc/ini ;}
goto-mc-keymap() { cd ~/.config/mc/mc.keymap ;}
goto-mpd() { cd ~/.mpd/mpd.conf ;}
goto-mplayer() { cd ~/.mplayer/config ;}
goto-mpv() { cd ~/.config/mpv/mpv.conf ;}
goto-mpv-input() { cd ~/.config/mpv/input.conf ;}
goto-nanorc() { cd ~;}
goto-ncmpcpp() { cd ~/.ncmpcpp/ ;}
goto-ncmpcpp-bindings() { cd ~/.ncmpcpp/ ;}
goto-neofetch() { cd ~/.config/neofetch/ ;}
goto-polybar() { cd ~/.config/polybar/ ;}
goto-qutebrowser() { cd ~/.config/qutebrowser/ ;}
goto-qutebrowser-keys() { cd ~/.config/qutebrowser/ ;}
goto-qutebrowser-quickmarks() { cd ~/.config/qutebrowser/ ;}
goto-rofibangs() { cd ~/.scripts/rofi-scripts-collection/ ;}
goto-ranger() { cd ~/.config/ranger/ ;}
goto-ranger-rifle() { cd ~/.config/ranger/ ;}
goto-ranger-commands() { cd ~/.config/ranger/ ;}
goto-samba() { sudo cd /etc/samba/ ;}
goto-surfraw() { cd ~.config/surfraw/ ;}
goto-tcshrc() { cd ~ ;}
goto-tmuxrc() { cd ~ ;}
goto-variety() { cd ~/.config/variety/ ;}
goto-vimrc() { cd ~ ;}
goto-xbindkeysrc() { cd ~ ;}
goto-xresources() { cd ~ ;}
goto-zshrc() { cd ~ ;}


# }}}
#-------- Utilities {{{
#------------------------------------------------------

# ranger
function ranger-cd {                                                                    
   tempfile="$(mktemp -t tmp.XXXXXX)"                                                  
   /usr/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}"                              
   test -f "$tempfile" &&                                                              
   if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then                          
       cd -- "$(cat "$tempfile")"                                                      
   fi                                                                                  
   rm -f -- "$tempfile"                                                                
}        

cpbak() { cp $1{,.bak} ;} # create backup copy
mcd() { mkdir -p -v $1; cd $1 ;} # create folder then cd into it
open() { xdg-open "$@" > /dev/null 2>&1 ;} # open with default GUI program

#update-grub() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
#grub-update() { sudo grub-mkconfig -o /boot/grub/grub.cfg ;}
grub-list() {
  RED='\033[0;31m'
  sudo grep "menuentry '" /boot/grub/grub.cfg | less -N
  echo -e "${RED} REMINDER: GRUB number starts at zero not one"
}

# list and grep with file permission
lsg() {
  keyword=$(echo "$@" |  sed 's/ /.*/g')
  ls -hlA --color=yes \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' \
  | grep -iE $keyword
}

# ls recent items at bottom with green TODAY yellow YESTERDAY substituted with file permission also
# https://www.reddit.com/r/archlinux/comments/41s1w4/what_is_your_favorite_one_liner_to_use/cz50y1m
# http://askubuntu.com/a/152005
lst() {
  ls -vAFqh --color=yes -got --time-style=long-iso "$@" \
  | sed "s/$(date +%Y-%m-%d)/\x1b[32m     TODAY\x1b[m/;s/$(date +'%Y-%m-%d' -d yesterday)/\x1b[33m YESTERDAY\x1b[m/" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}' | tac
}

lsl() {
  ls -hl --color=yes "$@" \
  | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf(" %0o ",k);print}'
}

# Sort by size
sbs() { du -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';}

# quickly cd out of directories using numbers, example: up 2
up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }

# show file access permission
# http://unix.stackexchange.com/a/46921
file-permission() { stat --format '%a %n' "$@" ;}

# display mime of file application/zip, application/x-tar
file-type() { file --mime-type -b "$@" ;}

# call vim help page from shell prompt
function :h { vim +":h $1" +'wincmd o' +'nnoremap q :q!<CR>' ;}

# this function computes the md5sum of a file  and compares it using grep
md5check() { md5sum "$1" | grep "$2";}

# search commandlinefu.com
cmdfu() { curl "http://www.commandlinefu.com/commands/matching/$(echo "$@" \
| sed 's/ /-/g')/$(echo -n $@ | base64)/plaintext" ;}

# display one random command from commandlinefu.com
cmdfu-random() { echo -e "`curl -sL http://www.commandlinefu.com/commands/random/json|sed -re 's/.*,"command":"(.*)","summary":"([^"]+).*/\\x1b[1;32m\2\\n\\n\\x1b[1;33m\1\\x1b[0m/g'`\n" ;}

# Shortcut to get the disk size of a directory and contents
sizeof() {
    du -ch "$1" | grep total
}

# Shortcut to change directory and list contents
cls() {
    if [ -d "$1" ]; then
        cd "$1"
        ls -l
    else
        echo "bash: cl: '$1': Directory not found"
    fi
}

# Shortcut to change directory and list contents
cdlsd() {
    if [ -d "$1" ]; then
        cd "$1"
        lsd 
    else
        echo "bash: cl: '$1': Directory not found"
    fi
}

function lowercase()
{
    for file ; do
        filename=${file##*/}
        case "$filename" in
        */*) dirname==${file%/*} ;;
        *) dirname=.;;
        esac
        nf=$(echo $filename | tr A-Z a-z)
        newname="${dirname}/${nf}"
        if [ "$nf" != "$filename" ]; then
            mv "$file" "$newname"
            echo "lowercase: $file --> $newname"
        else
            echo "lowercase: $file not changed."
        fi
    done
}

#}}}
#-------- Screenshot {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=Hh8G1aBp8gc
# DESC: take screenshot fullscreen, single window or draw a box
export PATH_SCREENSHOT=~/Pictures/screenshots
pix() { scrot -d 5 "$PATH_SCREENSHOT/fullscr_`date +'%F_%Hh%Ms%S'`.png" ;}
pix-area() { sleep 2 && scrot -s "$PATH_SCREENSHOT/windowed_`date +'%F_%Hh%Ms%S'`.png" ;}


# }}}
#-------- System Information {{{
#------------------------------------------------------

m-sound() { arecord -L && arecord -l && cat /proc/asound/pcm ;} #List audio capture card/mic
m-distro() { uname -a && lsb_release -a ;}
m-connectip() {
  echo ""
  echo "--------------- Connected Devices -----------------"
    nmap -sn $(netstat -rn | awk 'FNR == 3 {print $2}')/24
  echo "---------------------------------------------------"
  echo ""
}

# uses ip or ifconfig, good on older or newer system
m-ip() {
  echo ""
  echo "--------------- Network Information ---------------"
  echo "router ip:" $(netstat -rn | awk 'FNR == 3 {print $2}')
  # newer system like archlinux
  ip addr | awk '/global/ {print $1,$2}' | cut -d\/ -f1
  ip addr | awk '/global/ {print $3,$4}'
  ip addr | awk '/ether/ {print $1,$2}'
  ip addr | awk '/scope link/ {print $1,$2}' | cut -d\/ -f1
  # older system like debian
  ifconfig | awk '/inet addr/ {print $1,$2}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/Bcast/ {print $3}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/inet addr/ {print $4}' | awk -F: '{print $1,$2}'
  ifconfig | awk '/HWaddr/ {print $4,$5}'
  ifconfig | awk '/Scope:Link/ {print $1,$3}' | cut -d\/ -f1
  # echo External IP $(curl -s http://checkip.dyndns.org/ | grep -o "[[:digit:].]\+")
  # echo External IP: $(curl -s http://ipaddr.io/)
  # echo External IP: $(curl -s https://icanhazip.com/)
  # echo External IP: $(curl -s https://ifconfig.co/)
  # echo External IP: $(curl -s http://pasteip.me/api/cli/ && echo)
  echo external ip: $(curl -s http://ipecho.net/plain)
  echo "---------------------------------------------------"
  echo ""
}
# }}}

###########################################################################
# >>>--------------------    EXTERNAL TOOLS   ------------------------<<< #
###########################################################################

#-------- TMUX : Tmuxifier {{{
#------------------------------------------------------
export PATH="$HOME/.tmuxifier/bin:$PATH"
export TMUXIFIER_TMUX_OPTS="-2"
eval "$(tmuxifier init -)"
#}}}
#-------- FASD (Jump and Open Files Quickly) {{{
#------------------------------------------------------
# DEMO: http://www.youtube.com/watch?v=ur81Y-mV5Us
# LINK: https://github.com/clvv/fasd
# DESC: jump to path or open recent files quickly from cli

if which fasd >/dev/null; then
  eval "$(fasd --init auto)"	    # get fasd working, initialization code

  # different fasd listing
  # alias a='fasd -a'               # any
  # alias s='fasd -si'              # show / search / select
  # alias d='fasd -d'               # directory
  # alias f='fasd -f'               # file
  # alias sd='fasd -sid'            # interactive directory selection
  # alias sf='fasd -sif'            # interactive file selection
  # alias z='fasd_cd -d'            # cd, same functionality as j in autojump
  # alias zz='fasd_cd -d -i'        # cd with interactive selection

  # FASD DOC
  # f foo           # list frecent files matching foo
  # a foo bar       # list frecent files and directories matching foo and bar
  # f js$           # list frecent files that ends in js
  # f -e vim foo    # run vim on the most frecent file matching foo
  # mplayer `f bar` # run mplayer on the most frecent file matching bar
  # z foo           # cd into the most frecent directory matching foo
  # open `sf pdf`   # interactively select a file matching pdf and launch `open`

  # open with external programs
  alias m="f -e $PLAYER"		# open with video player
  alias o="a -e $OPENER"		# open any file
  alias v="f -e $EDITOR"		# open with text editor
fi

#}}}
    #-------- FZF: Fuzzy Finder {{{
    #------------------------------------------------------
    # DEMO: https://www.youtube.com/playlist?list=PLqv94xWU9zZ2fMsMMDF4PjtNHCeBFbggD
    # DESC: interactive fuzzy string matching
    # LINK: https://github.com/junegunn/fzf

    #-------- FZF: List bash Functions using fzf
    rofi-fzf() { $(declare -f | awk '/fzf-/ {print $1}' | grep -i fzf | fzf -e -i) ;}

    # fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i | awk '{$1=$1};1')" | xclip -selection clipboard ;}
    fzf-clipboard() { echo -n "$(greenclip print | fzf -e -i)" | xclip -selection clipboard ;}
    # fzf-playonlinux() { playonlinux --run '$(ls ~/.PlayOnLinux/shortcuts | fzf -e -i )' ;}
    # fzf-bookmarkscli() { sr "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
    # fzf-bookmarks() { surfraw "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
    # fzf-bookmarks2clipboard() { echo -n "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" | awk '{print $2}' | xclip -selection clipboard ;}
    # fzf-bookmarkstor() { surfraw -browser=tor-browser-en "$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sed '/^#/d' | sed '/^\//d' | sort -n | fzf -e -i )" ;}
    # fzf-tor() { torify w3m "$(cat ~/.config/surfraw/bookmarks | awk 'NF != 0 && !/^#/ && /\.onion/' |fzf -e -i | awk '{print $2}')" ;}

    fzf-launcher() {
      # note: xdg-open has a bug with .desktop files, so we cant use that shit
      selected="$(ls /usr/share/applications | fzf -e -i )"
      nohup `grep '^Exec' "/usr/share/applications/$selected" | tail -1 | sed 's/^Exec=//' | sed 's/%.//'` >/dev/null 2>&1&
      # disown if exit 0 successfully
      if [[ $? = 0 ]] ; then disown; fi
    }

    # https://junegunn.kr/2015/04/browsing-chrome-history-with-fzf/
    # https://github.com/junegunn/fzf/wiki/examples#browsing-history
    fzf-chromium_history() {
      local cols sep
      cols=$(( COLUMNS / 3 ))
      sep='{::}'

      # macos
      # cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
      # linux
      \cp -f ~/.config/chromium/Default/History /tmp/h

      sqlite3 -separator $sep /tmp/h \
        "select substr(title, 1, $cols), url
         from urls order by last_visit_time desc" |
      awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
      fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs xdg-open
      # fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
    }

    fzf-locate() {
      # xdg-open "$(locate "*" | fzf -e -i )"
      # xdg-open "$(locate home media | fzf -e -i )" >/dev/null 2>&1 & disown
      xdg-open "$(locate \
        -d /var/lib/mlocate/mlocate.db \
        -d ~/.updatedb/bingbong.db \
        -d ~/.updatedb/kamui.db \
        -d ~/.updatedb/wiiiso.db \
        home media \
        | fzf -e -i )" >/dev/null 2>&1 & disown


      # some programs require a longer time to load
      # sleep 1.5

      # if cancle or fail then exit
      # if [ $? -ne 0 ]
      # then
      #  	exit
      # fi
    }

    # Ex: fzfr feh >> multi selection in fzf >> send everythign to feh
    # http://www.reddit.com/r/commandline/comments/3abtup/fzfr_fzf_bash_function/
    fzfr() { fzf -m -x | xargs -d'\n' -r "$@" ; }

    # edit single line snippet
    cfg-snippetrc() { $EDITOR ~/.snippetrc ;}
    cfg-multisnippetrc() { $EDITOR ~/.multisnippet/"$(ls ~/.multisnippet | fzf -e -i)" ;}
    multisnippet() { $EDITOR ~/.multisnippet/"$1" ;}
    fzf-snippet() {
      selected="$(cat ~/.snippetrc | sed '/^$/d' | sort -n | fzf -e -i )"
      # remove tags, leading and trailing spaces, also no newline
      echo "$selected" | sed -e s/\;\;\.\*\$// | sed 's/^[ \t]*//;s/[ \t]*$//' | tr -d '\n' | xclip -selection clipboard
    }

    fzf-multisnippet() {
      # location of snippets
      dir=~/.multisnippet

      # merge filename and tags into single line
      results=$(for FILE in $dir/*
      do
        getname=$(basename $FILE)
        gettags=$(head -n 1 $FILE)
        echo -e "$getname \t $gettags"
      done)

      # copy content into clipboard without tags
      filename=$(echo "$(echo "$results" | fzf -e -i )" | cut -d' ' -f 1)
      sed 1d $dir/$filename | xclip -selection clipboard
    }

    # From FZF doc (do not work in bash)
    # vf - fuzzy open with vim from anywhere
    # ex: vf word1 word2 ... (even part of a file name)
    # zsh autoload function
    vf() {
      local files

      files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})

      if [[ -n $files ]]
      then
         vim -- $files
         print -l $files[1]
      fi
    }

    # fd - cd to selected directory
    fd() {
      local dir
      dir=$(find ${1:-.} -path '*/\.*' -prune \
                      -o -type d -print 2> /dev/null | fzf +m) &&
      cd "$dir"
    }

    # fda - including hidden directories
    fda() {
      local dir
      dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
    }

    # fdr - cd to selected parent directory
    fdr() {
      local declare dirs=()
      get_parent_dirs() {
        if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
        if [[ "${1}" == '/' ]]; then
          for _dir in "${dirs[@]}"; do echo $_dir; done
        else
          get_parent_dirs $(dirname "$1")
        fi
      }
      local DIR=$(get_parent_dirs $(realpath "${1:-$PWD}") | fzf-tmux --tac)
      cd "$DIR"
    }

    # cf - fuzzy cd from anywhere
    # ex: cf word1 word2 ... (even part of a file name)
    # zsh autoload function
    cf() {
      local file

      file="$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1)"

      if [[ -n $file ]]
      then
         if [[ -d $file ]]
         then
            cd -- $file
         else
            cd -- ${file:h}
         fi
      fi
    }

    # cdf - cd into the directory of the selected file
    cdf() {
       local file
       local dir
       file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
    }

    # tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
    # `tm` will allow you to select your tmux session via fzf.
    # `tm irc` will attach to the irc session (if it exists), else it will create it.
    tm() {
      [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
      if [ $1 ]; then
        tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
      fi
      session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
    }

    # fasd & fzf change directory - open best matched file using `fasd` if given argument, filter output of `fasd` using `fzf` else
    vfasd() {
        [ $# -gt 0 ] && fasd -f -e ${EDITOR} "$*" && return
        local file
        file="$(fasd -Rfl "$1" | fzf -1 -0 --no-sort +m)" && vi "${file}" || return 1
    }

    # with FASD
    zfzf() {
      local dir
      dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
    }
    # }}}
#-------- Powerline (Old config) {{{
#------------------------------------------------------
# Old Powerline config, keep it just in case

# source /etc/profile
# PATH=$PATH:~/bin

# export TERM="screen-256color"
# export PATH="$HOME/.local/bin:$PATH"
# export POWERLINE_COMMAND=powerline
# export POWERLINE_CONFIG_COMMAND=powerline-config

# powerline-daemon -q
# POWERLINE_BASH_CONTINUATION=1
# POWERLINE_BASH_SELECT=1

# . ~/.local/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh

#if [ -f ~/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh ]; then
#    source ~/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh
#fi
#}}}

###########################################################################
# >>>--------------------    ARCHIVE MANAGER  ------------------------<<< #
###########################################################################

#-------- Archive Manager CLI {{{
#------------------------------------------------------
archive-append() { atool -a "$@" ;}
archive-extract-logs() {
  if [ $# -lt 1 ]; then
    echo -e "check zip file if it is corrupted or has bad errors"
    echo -e "Usage: $0 <filename>"
    echo -e "\nExample:\n$0 file.zip"
    echo -e "$0 file1.zip file2.zip file3.zip"
    echo -e "$0 *.zip"
    return 1
  fi
  NOSPACES=$(basename "$PWD" | sed 's/ /_/g')
  LOGFILE=_errorcheck_"$NOSPACES".log
  echo "${Red}>>>Log File Saved To: $LOGFILE ${Color_Off}"
  echo "${Red}>>>Extracting Files ${Color_Off}"
  echo "${Red}>>>=============================== ${Color_Off}"
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    echo "${Green}Current File: $arg ${Color_Off}"
    atool -x "$arg" >> "$LOGFILE" || break
  done
}
archive-extract() { atool -x "$@" ;}
archive-extract-vpk() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    atool -x "$arg"
  done
}

archive-list() { atool -l "$1" | less -N ;}
archive-search() { atool -l "$1" | grep -i "$2" ;}

# create archive
archive-create-7z() { atool -a archive.7z "$@" ;}
archive-create-zip() { atool -a archive.zip "$@" ;}
archive-create-rar() { atool -a archive.rar "$@" ;}
archive-create-tar() { atool -a archive.tar "$@" ;}
archive-create-targz() { atool -a archive.tar.gz "$@" ;}
archive-create-cbz() { atool -a archive.zip "$@" && mv -- archive.zip archive.cbz ;}
archive-create-cbr() { atool -a archive.rar "$@" && mv -- archive.rar archive.cbr ;}

# converting archive
convert-to-archive-tar() { arepack -F .tar -e "$@" ;}
convert-to-archive-zip() { arepack -F .zip -e "$@" ;}
convert-to-archive-rar() { arepack -F .rar -e "$@" ;}
convert-to-archive-targz() { arepack -F .tar.gz -e "$@" ;}
convert-to-archive-7z() { arepack -F .7z -e "$@" ;}
convert-to-archive-cbz() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
      arepack -F .zip -e "$arg" && mv "${arg%%.*}".zip "${arg%%.*}".cbz
    else
      if [[ -f "${arg%%.*}".zip && ! -f "${arg%%.*}".cbz ]]; then
        mv -v "${arg%%.*}".zip "${arg%%.*}".cbz
      fi
    fi
  done
}
convert-to-archive-cbr() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    if [[ ! -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
      arepack -F .rar -e "$arg" && mv "${arg%%.*}".rar "${arg%%.*}".cbr
    else
      if [[ -f "${arg%%.*}".rar && ! -f "${arg%%.*}".cbr ]]; then
        mv -v "${arg%%.*}".rar "${arg%%.*}".cbr
      fi
    fi
  done
}

#}}}
#-------- Detox Filename Cleanup {{{
#------------------------------------------------------
# DESC: cleanup filename to different styles
    
# eg. FOO BAR LinuX.TAR.GZ --> foo_bar_linux.tar.gz
detox-unix() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/ /_/g' | sed 's/-/_/g '| tr '[:upper:]' '[:lower:]')
    mv "$arg" "$filter_name"
  done
}

# eg. FOO BAR LinuX.TAR.GZ --> Foo Bar Linux.tar.gz
detox-human() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv "$arg" "$filter_name"
  done
}

# eg. FOO-BAR-LinuX.TAR.GZ --> Foo Bar Linux.tar.gz
detox-human-dash() {
  myArray=( "$@" )
  for arg in "${myArray[@]}"; do
    filter_name=$(echo "$arg" | sed 's/%20/ /g' | sed 's/_/ /g' | sed 's/-/ /g' | tr '[:upper:]' '[:lower:]' | sed 's/\b\([[:alpha:]]\)\([[:alpha:]]*\)\b/\u\1\L\2/g' | sed -e "s/'\(.\)/'\l\1/g" | sed -e "s/\.\(.\)/\.\l\1/g" )
    mv "$arg" "$filter_name"
  done
}
# }}}
#-------- Clean Stuff {{{
#------------------------------------------------------

# http://www.commandlinefu.com/commands/view/954
symlinks() { find . -type l ! -exec test -e {} \; -print ;}
symlinks-delete() { find . -type l ! -exec test -e {} \; -print0 | xargs -0 rm ;}
rm-except() {
	find . -type f -not -name '*copy*' | xargs rm
}
rmdir-empty() { find -empty -print -delete ;}
# --// Cleanup //--
cleanup () {
    echo -e '\e[1;31m * Cleaning Thumbnails * \e[1;37m'
    rm -rfv ~/.thumbnails/*
    rm -rfv ~/.cache/thumbnails/*
    echo -e '\e[1;31m * Removing cache * \e[1;37m'
    rm -rfv ~/.cache/chromium/*
    rm -rfv ~/.cache/vlc/*
    echo -e '\e[1;31m * Cleaning Trash * \e[1;37m'
    gvfs-trash --empty
}
d-swiggle() { find . -type f -name '*~' -exec rm -v {} \; ;}
d-url() { find . -type f -iname '*.url' -exec rm -v {} \; ;}
d-thumbsdb() { find . -type f -iname 'Thumbs.db' -exec rm -v {} \; ;}
swiggle() { find . -name *~ -delete ;}
cleanlinks() {
	# not in the repos: inspired by http://www.xfree86.org/4.8.0/cleanlinks.1.html
	# delete empty folder
	find . -type d -empty -print0 | xargs -0 rmdir
	# delete broken symlinks
	find . -type l -xtype l | xargs -l rm
}



# }}}
#-------- Renaming Case {{{
#------------------------------------------------------

alias renameit="ls | rename -v 's/ /_/g'" #change files with spaces to underscore

padme() {
	num=`expr match "$1" '[^0-9]*\([0-9]\+\).*'`
	paddednum=`printf "%04d" $num`
    mv "$1" ${1/$num/$paddednum}
	echo ${1/$num/$paddednum}
}
#}}}

###########################################################################
# >>>--------------------    KEYBOARD BINDING   ----------------------<<< #
###########################################################################

#-------- Vim Toggle {{{
#------------------------------------------------------
vim-toggle() {
# https://xpressrazor.wordpress.com/2014/03/30/script-to-toggle-keys
# toggle caplock and esc key
if xmodmap -pke | egrep -i "escape" | egrep -i "keycode.*9.*"; then
  echo "Changing from original to mapped"
  xmodmap -e "clear lock"
  xmodmap -e "keycode 66 = Escape"
  xmodmap -e "keycode 9 = Caps_Lock"
  xmodmap -e "add Lock = Caps_Lock"
else
  echo "Changing back from mapped to original"
  xmodmap -e "clear lock"
  xmodmap -e "keycode 9 = Escape"
  xmodmap -e "keycode 66 = Caps_Lock"
  xmodmap -e "add Lock = Caps_Lock"
fi
}
#}}}
#-------- Set Wallpaper {{{
#------------------------------------------------------
setwallpaper() {
  ConnectedMonitor="$(xrandr | awk '/ connected/ {print $1}' | head -n 1)"
  PATH_WALLPAPER=~/Pictures/Wallpapers
  
  # find current running windows manager
  CURRENT_WM="$(wmctrl -m | grep "Name:" | awk '{print $2}')"
  
  # mate
  if [ $CURRENT_WM = Marco ]; then
  gsettings set org.mate.background picture-filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
  fi
  
  # xfce
  # tutorial video: http://www.youtube.com/watch?v=tL9uVT8D6k4
  if [[ $DESKTOP_SESSION = Xfwm4 ]] || [[ $DESKTOP_SESSION = "Xfce Session" ]]; then
  xfconf-query -c xfce4-desktop -p /backdrop/screen0/monitor"$ConnectedMonitor"/workspace0/last-image -s "$PWD"/"$1"
  fi
  
  # i3
  if [ $DESKTOP_SESSION = i3 ]; then
  # feh --randomize --bg-fill "$PATH_WALLPAPER"/*
  feh --randomize --bg-fill "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
fi
  
  # gnome shell
  # tutorial video: http://www.youtube.com/watch?v=B_VnPXy3VCw
  if [ $DESKTOP_SESSION = GNOME ]; then
  gsettings set org.gnome.desktop.background picture-uri file://"$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
  fi
  
  
  # gnome2
  if [ $DESKTOP_SESSION = GNOME ]; then
  gconftool-2 -t str -s /desktop/gnome/background/picture_filename "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
  fi
  
  # lxde
  # tutorial video: http://www.youtube.com/watch?v=5xzfBiHuknk
  if [ $DESKTOP_SESSION = LXDE ]; then
  pcmanfm -w "$(find $PATH_WALLPAPER -type f -iregex '.*\.\(bmp\|gif\|jpg\|png\)$' | shuf -n1)"
 fi
}
#}}}
