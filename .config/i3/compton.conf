

###########################################################################
# >>> ---------------------       BACKEND    ------------------------ <<< #
###########################################################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
# backend = "glx";


###########################################################################
# >>> ------------------------    GLX BACKEND    -------------------- <<< #
###########################################################################

# glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
# Useful with --glx-swap-method, as well.
# glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
# glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# glx-no-rebind-pixmap = true;


# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
# glx-swap-method = "undefined";


###########################################################################
# >>> ---------------------       SHADOW     ------------------------ <<< #
###########################################################################

# Enabled client-side shadows on windows.
shadow = true;							

# Don't draw shadows on DND windows.
no-dnd-shadow = true;					

# Avoid drawing shadows on dock/panel windows.
no-dock-shadow = true;					

# Zero the part of the shadow's mask behind the # window. 
# Fix some weirdness with ARGB windows.
clear-shadow = true;					

# The blur radius for shadows. (default 12)
shadow-radius = 7;

# The left offset for shadows. (default -15)
shadow-offset-x = -7;

# The top offset for shadows. (default -15)
shadow-offset-y = -7;

# The translucency for shadows. (default .75)
# shadow-opacity = 0.5;

# Red color value of shadow. (0.0 - 1.0, defaults to 0)
# shadow-red = 0.0;						

# Green color value of shadow. (0.0 - 1.0, defaults to 0)
# shadow-green = 0.0;					

# Blue color value of shadow. (0.0 - 1.0, defaults to 0)
# shadow-blue = 0.0;					

# # Exclude conditions for shadows.
# shadow-exclude = [
# 			"name = 'Notification'",
# 			"class_g ?= 'Notify-osd'",
# 			"class_g = 'VirtualBox'",
# 			"class_g = 'Conky'",
# 			"_GTK_FRAME_EXTENTS@:c",
# 			"class_g = 'Cairo-clock'",
# 			"class_g = 'i3-frame'",
# 			"window_type *= 'normal' && ! name ~= ''"
# ];

# shadow-exclude-reg = "x10+0+0";
# xinerama-shadow-crop = true;

# Avoid drawing shadow on all shaped windows. (see also: --detect-rounded-corners) 
shadow-ignore-shaped = true;			
 										


###########################################################################
# >>> ---------------------       OPACITY     ----------------------- <<< #
###########################################################################

# menu-opacity = 1;
inactive-opacity = 0.92;
active-opacity = 1;
# frame-opacity = 1;
# inactive-opacity-override = false;
# alpha-step = 0.06;

# Dim inactive windows. (0.0 - 1.0)
inactive-dim = 0.05;

# Do not let dimness adjust based on window opacity.
inactive-dim-fixed = true;

# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
# blur-background = true;

# Blur background of opaque windows with transparent frames as well.
# blur-background-frame = true;

# Do not let blur radius adjust based on window opacity.
# blur-background-fixed = false;
# blur-background-exclude = [
#     "window_type = 'dock'",
#     "window_type = 'desktop'"
# ];



###########################################################################
# >>> ---------------------       FADING     ------------------------ <<< #
###########################################################################


# # Fading
# fading = false;                  # Fade windows during opacity changes.
# fade-delta = 12;                # The time between steps in a fade in milliseconds. (default 10).
# fade-in-step = 0.15;            # Opacity change between steps while fading in. (default 0.028).
# fade-out-step = 0.15;           # Opacity change between steps while fading out. (default 0.03).
# no-fading-openclose = false;    # Fade windows in/out when opening/closing.


###########################################################################
# >>> ---------------       WINDOW TYPE SETTING     ----------------- <<< #
###########################################################################

# wintypes:
# {
#   tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; };
#   # fade: Fade the particular type of windows.
#   # shadow: Give those windows shadow
#   # opacity: Default opacity for the type of windows.
#   # focus: Whether to always consider windows of this type focused.
# };
